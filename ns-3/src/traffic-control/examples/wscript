# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

def build(bld):

    obj = bld.create_ns3_program('red-tests', ['point-to-point', 'internet', 'applications', 'flow-monitor', 'traffic-control'])
    obj.source = 'red-tests.cc'

    obj = bld.create_ns3_program('red-vs-ared', ['point-to-point', 'point-to-point-layout', 'internet', 'applications', 'traffic-control'])
    obj.source = 'red-vs-ared.cc'

    obj = bld.create_ns3_program('adaptive-red-tests', ['point-to-point', 'internet', 'applications', 'flow-monitor', 'traffic-control'])
    obj.source = 'adaptive-red-tests.cc'

    obj = bld.create_ns3_program('pfifo-vs-red', ['point-to-point', 'point-to-point-layout', 'internet', 'applications', 'traffic-control'])
    obj.source = 'pfifo-vs-red.cc'

    obj = bld.create_ns3_program('codel-vs-pfifo-basic-test', ['point-to-point','network', 'internet', 'applications', 'traffic-control'])
    obj.source = 'codel-vs-pfifo-basic-test.cc'
    
    obj = bld.create_ns3_program('codel-vs-pfifo-asymmetric', ['point-to-point','network', 'internet', 'applications', 'traffic-control'])
    obj.source = 'codel-vs-pfifo-asymmetric.cc'

    obj = bld.create_ns3_program('pie-example', ['point-to-point', 'internet', 'applications', 'flow-monitor', 'traffic-control'])
    obj.source = 'pie-example.cc'

    obj = bld.create_ns3_program('drr-example', ['point-to-point', 'internet', 'applications', 'flow-monitor', 'traffic-control'])
    obj.source = 'drr-example.cc'

    obj = bld.create_ns3_program('simple-queue-drops',
                                         ['vr-app' ,'network','internet', 'point-to-point', 'applications', 'traffic-control', 'flow-monitor', 'netanim'])
    obj.source = 'simple-queue-drops.cc'

    obj = bld.create_ns3_program('bursty-queue-drops',
                                         ['vr-app' ,'network','internet', 'point-to-point', 'applications', 'traffic-control', 'flow-monitor', 'netanim'])
    obj.source = 'bursty-queue-drops.cc'

    obj = bld.create_ns3_program('heavy-bursty-queue-drops',
                                         ['vr-app' ,'network','internet', 'point-to-point', 'applications', 'traffic-control', 'flow-monitor', 'netanim'])
    obj.source = 'heavy-bursty-queue-drops.cc'

    obj = bld.create_ns3_program('light-bursty-queue-drops',
                                         ['vr-app' ,'network','internet', 'point-to-point', 'applications', 'traffic-control', 'flow-monitor', 'netanim'])
    obj.source = 'light-bursty-queue-drops.cc'

    obj = bld.create_ns3_program('lhb-queue-drops',
                                         ['vr-app' ,'network','internet', 'point-to-point', 'applications', 'traffic-control', 'flow-monitor', 'netanim'])
    obj.source = 'lhb-queue-drops.cc'

    obj = bld.create_ns3_program('random-queue-drops',
                                         ['vr-app' ,'network','internet', 'point-to-point', 'applications', 'traffic-control', 'flow-monitor', 'netanim'])
    obj.source = 'random-queue-drops.cc'

    obj = bld.create_ns3_program('dctcp-example',
                                 ['point-to-point', 'internet', 'applications', 'flow-monitor'])

    obj.source = 'dctcp-example.cc'